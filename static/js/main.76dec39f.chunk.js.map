{"version":3,"sources":["actions/index.js","chat.js","serviceWorker.js","reducers/recieveMessage.js","reducers/setUserName.js","reducers/index.js","store/index.js","index.js"],"names":["setUserName","payload","type","Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleConnectionChange","navigator","onLine","setState","isOffline","sendOfflineMessages","scrollToBottom","chatRef","current","scrollTo","top","scrollHeight","behavior","handleSubmit","event","preventDefault","state","sendMessage","userName","messageText","setOfflineMessage","handleMessageChange","target","value","handleNickNameChange","dispatch","handleVisibilityChange","isVisible","reconnectingInterval","isFirstMessage","React","createRef","unsendMessages","notifyMeThrottled","throttle","notifyMe","connecting","window","addEventListener","removeEventListener","_this2","client","WebSocket","onopen","clearInterval","console","log","onmessage","message","JSON","parse","data","addMessage","scrollToBottomIfNeeded","onclose","setInterval","scrollTop","children","length","offsetTop","from","send","stringify","_this3","forEach","element","concat","Notification","permission","requestPermission","then","alert","react_default","a","createElement","index_es5","onChange","className","dist","id","ref","groupMessage","map","key","Date","time","toLocaleTimeString","index","onSubmit","name","placeholder","Component","connect","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","messageReducer","arguments","undefined","action","reverse","userNameReducer","rootReducer","combineReducers","persistConfig","storage","stateReconciler","autoMergeLevel2","blacklist","persistedReducer","persistReducer","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","ReactDOM","render","es","integration_react","loading","chat","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.76dec39f.chunk.js","sourcesContent":["\nexport const addMessage = (payload) => {\n    return {\n        type: 'ADDMESSAGE',\n        payload: payload\n    }\n}\nexport const addfirstMessage = (payload) => {\n    return {\n        type: 'ADDFIRSTMESSAGE',\n        payload: payload\n    }\n}\nexport const setUserName = (payload) => {\n    return {\n        type: 'SETUSERNAME',\n        payload: payload\n    }\n}\n// export const setMessage = (payload) => {\n//     return {\n//         type: 'SETMESSAGE',\n//         payload: payload\n//     }\n// }\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PageVisibility from 'react-page-visibility';\nimport { throttle } from 'lodash';\nimport { Offline } from \"react-detect-offline\";\nimport { addMessage, addfirstMessage, setUserName } from './actions';\nconst mapStateToProps = state => {\n    return {\n        userName: state.userName,\n        groupMessage: state.groupMessage\n    };\n}\nclass Chat extends React.Component {\n    constructor(props) {\n        super(props);\n        this.reconnectingInterval = null;\n        this.isFirstMessage = true;\n        this.chatRef = React.createRef();\n        this.state = {\n            messageText: '',\n            isVisible: true,\n            isOffline: false,\n            unsendMessages: []\n        };\n        this.notifyMeThrottled = throttle(this.notifyMe, 1000 * 60 * 30);\n\n    }\n    componentDidMount() {\n        // this.props.dispatch(setUserName(localStorage.getItem('userName')));\n        this.connecting();\n        window.addEventListener('online', this.handleConnectionChange);\n        window.addEventListener('offline', this.handleConnectionChange);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('online', this.handleConnectionChange);\n        window.removeEventListener('offline', this.handleConnectionChange);\n    }\n    handleConnectionChange = () => {\n        const condition = navigator.onLine ? 'online' : 'offline';\n        if (condition === 'offline') {\n            this.setState({\n                isOffline: true\n            })\n        }\n        else {\n            this.sendOfflineMessages();\n            this.setState({\n                isOffline: false\n            })\n        }\n    }\n    connecting() {\n        this.client = new WebSocket('ws://st-chat.shas.tel');\n        this.isFirstMessage = true;\n        this.client.onopen = () => {\n            if (this.reconnectingInterval != null) {\n                clearInterval(this.reconnectingInterval);\n                this.reconnectingInterval = null;\n                console.log('Conection is reestablished')\n            }\n            else {\n                console.log('Connection is established');\n            }\n            // setTimeout(() => this.client.close(), 10000)\n        };\n        this.client.onmessage = (message) => {\n            if (this.state.isVisible === false) {\n                this.notifyMeThrottled();\n            }\n            if (this.isFirstMessage) {\n                this.props.dispatch(addfirstMessage(JSON.parse(message.data)));\n                this.isFirstMessage = false;\n                this.scrollToBottom();\n            }\n            else {\n                this.props.dispatch(addMessage(JSON.parse(message.data)));\n                this.scrollToBottomIfNeeded();\n            }\n        };\n        this.client.onclose = () => {\n            console.log('WebSocket Client Closed');\n            clearInterval(this.reconnectingInterval);\n            this.reconnectingInterval = setInterval(() => {\n                console.log('trying to reconnect');\n                this.connecting();\n            }, 2000)\n        }\n    }\n    scrollToBottomIfNeeded() {\n        if (this.chatRef.current.scrollTop - this.chatRef.current.children[this.chatRef.current.children.length - 1].offsetTop > -800) {\n            this.scrollToBottom();\n        }\n    }\n    scrollToBottom = () => {\n        // this.chatRef.current.scrollTop = this.chatRef.current.scrollHeight;\n        this.chatRef.current.scrollTo({\n            top: this.chatRef.current.scrollHeight,\n            behavior: 'auto'\n        })\n    };\n    handleSubmit = event => {\n        event.preventDefault();\n        if (this.state.isOffline === false) {\n\n            this.sendMessage(this.props.userName,this.state.messageText);\n        } else {\n            this.setOfflineMessage();\n        }\n        this.setState({\n            messageText: ''\n        })\n    }\n    sendMessage(from, message) {\n        this.client.send(JSON.stringify({\n            from: from,\n            message: message\n        }))\n    }\n    sendOfflineMessages() {\n        if (this.state.unsendMessages.length !== 0) {\n            this.state.unsendMessages.forEach((element) => {\n                this.sendMessage(element.from,element.message);\n            })\n            this.setState({\n                unsendMessages: []\n            })\n        }\n    }\n    setOfflineMessage() {\n        this.setState({\n            unsendMessages: this.state.unsendMessages.concat({\n                from: this.props.userName,\n                message: this.state.messageText\n            })\n        })\n    }\n    handleMessageChange = event => {\n        this.setState({\n            messageText: event.target.value\n        })\n    }\n    handleNickNameChange = event => {\n        // this.setState({\n        //     userName: event.target.value\n        // });\n        this.props.dispatch(setUserName(event.target.value));\n\n    }\n    handleVisibilityChange = isVisible => {\n        this.setState({\n            isVisible: isVisible\n        })\n    }\n    notifyMe() {\n        if (!(\"Notification\" in window)) {\n            alert(\"This browser does not support desktop notification\");\n        }\n\n        else if (Notification.permission === \"granted\") {\n            var notification = new Notification(\"You recieved new message(s)!\");\n        }\n\n        else if (Notification.permission !== \"denied\") {\n            Notification.requestPermission().then(function (permission) {\n                if (permission === \"granted\") {\n                    var notification = new Notification(\"You recieved new message(s)!\");\n                }\n            });\n        }\n    }\n    render() {\n        return (\n            <PageVisibility onChange={this.handleVisibilityChange}>\n                <div className=\"chatWindow\">\n                    <Offline >\n                        <div className=\"offlineWrapper\">\n                            <p className=\"offline\">Offline mode </p>\n                        </div>\n                    </Offline>\n                    <ul className=\"chat\" id=\"chatList\" ref={this.chatRef}>\n                        {\n                            this.props.groupMessage.map(data => (\n                                <li key={data.id} className='other'>\n                                    <div className='msg whiteBackground'>\n                                        <p>{data.from}</p>\n                                        <div className='message'>{data.message}</div>\n                                        <time>{new Date(data.time).toLocaleTimeString()}</time>\n                                    </div>\n                                </li>\n                            ))\n                        }\n                        {\n                            this.state.unsendMessages.map((data, index) => (\n                                <li key={index} className='other'>\n                                    <div className='msg grayBackground'>\n                                        <p>{data.from}</p>\n                                        <div className='message'>{data.message}</div>\n                                    </div>\n                                </li>\n                            ))\n                        }\n                    </ul>\n                    <div className=\"chatInputWrapper\">\n                        <form onSubmit={this.handleSubmit} className=\"form\">\n                            <input\n                                className=\"textarea input userName\"\n                                name=\"userName\"\n                                type=\"text\"\n                                value={this.props.userName}\n                                placeholder=\"Nickname\"\n                                onChange={this.handleNickNameChange}\n                            />\n                            <input\n                                className=\"textarea input\"\n                                name=\"messageText\"\n                                type=\"text\"\n                                value={this.state.messageText}\n                                placeholder=\"Enter your message...\"\n                                onChange={this.handleMessageChange}\n                            />\n                            <button className=\"submitButton\" type=\"submit\">Send</button>\n                        </form>\n                    </div>\n                </div>\n            </PageVisibility>\n        )\n    }\n}\nexport default connect(mapStateToProps)(Chat);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if ( /*process.env.NODE_ENV === 'production' && */'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst messageReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'ADDMESSAGE':\n            return state.concat(action.payload)\n        case 'ADDFIRSTMESSAGE': {\n            return action.payload.reverse()\n        }\n        default:\n            return state\n    }\n}\nexport default messageReducer; ","\nconst userNameReducer = (state = '', action) => {\n    switch (action.type) {\n        case 'SETUSERNAME':\n            return action.payload\n        default:\n            return state\n    }\n}\nexport default userNameReducer; ","import messageReducer from './recieveMessage';\nimport userNameReducer from './setUserName'\n// import setMessageReducer from './setMessage'\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n    groupMessage: messageReducer,\n    userName: userNameReducer,\n    // messageText: setMessageReducer\n})\nexport default rootReducer;","import { createStore } from \"redux\";\nimport storage from 'redux-persist/lib/storage'\nimport rootReducer from '../reducers';\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nconst persistConfig = {\n    key: 'root',\n    storage,\n    stateReconciler: autoMergeLevel2 ,\n    blacklist: ['groupMessage']\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport const store = createStore(persistedReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nexport let persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\n// import store from './store';\nimport Chat from './chat'\nimport * as serviceWorker from './serviceWorker';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport {store,persistor} from './store/index'\n\nconst App = () => (\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <Chat />\n        </PersistGate>\n    </Provider>\n)\nReactDOM.render(\n    <App />,\n    document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}